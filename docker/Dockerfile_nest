
#
# TVB-multiscale (NEST, NETPYNE (NEURON), ANNarchy) simulations environment
#
# Install NEST from Docker registry, then the rest of tvb-multiscale dependencies.
# Finally link tvb-multiscale from Github sources.
#

# Install NEST, latest stable version (December 2022)
ARG NEST_VER=3.5
ARG NEST_DESKTOP_HOST=0.0.0.0
ARG NEST_DESKTOP_PORT=8000
ARG NEST_SERVER_HOST=0.0.0.0
ARG NEST_SERVER_MODULES=nest,numpy
ARG NEST_SERVER_PORT=5000
ARG NEST_SERVER_RESTRICTION_OFF=1
ARG NEST_SERVER_STDOUT=1
FROM docker-registry.ebrains.eu/nest/nest-simulator:$NEST_VER

MAINTAINER lia.domide@codemart.ro

# ENV DEBIAN_FRONTEND noninteractive
ENV LANG=C.UTF-8

RUN apt-get update; apt-get install -y python3-venv python3-virtualenv git;

# Create user different than root
RUN useradd -ms /bin/bash docker
USER docker
ARG HOME=/home/docker
RUN mkdir $HOME/env; mkdir $HOME/packages

# Create a dedicated Python env for working in it
ENV VENV=$HOME/env/neurosci
RUN python3 -m venv $VENV && python3 -m venv --system-site-packages $VENV; \
    $VENV/bin/pip3 install --upgrade pip;
RUN $VENV/bin/pip3 install --upgrade nose;

# Install NESTServerClient
WORKDIR $HOME/packages
RUN git clone https://github.com/nest/nest-client.git
RUN cd nest-client; \
     $VENV/bin/python3 setup.py install --user;


# Install TVB-multiscale specific packages

# WORKDIR $HOME/packages

# Install NEURON, NetPyNE and ANNarchy (and optionally pyNN)
# Install NEURON and NetPyNE
RUN $VENV/bin/pip3 install neuron
#RUN $VENV/bin/pip3 install optuna
RUN $VENV/bin/pip3 install netpyne
# RUN $VENV/bin/pip3 install ANNarchy
# RUN $VENV/bin/pip3 install pyqtgraph pandoc tensorboardX;
# RUN $VENV/bin/pip3 install cython;
# RUN git clone https://github.com/ANNarchy/ANNarchy.git
# RUN cd ANNarchy; \
#     $VENV/bin/python3 setup.py install;
# RUN $VENV/bin/pip3 install pyNN

# WORKDIR $HOME/packages

# Install Pyspike:
RUN $VENV/bin/pip3  install pyspike
# RUN git clone --depth 1 https://github.com/mariomulansky/PySpike.git; \
#     cd PySpike; \
#     $VENV/bin/python3 setup.py build_ext install;

# Install ray:
# WORKDIR $HOME/packages
# TODO: Remove when ray==1.5.0 fixed
# aioredis==1.3.0 has to be installed first on a separate pip3 command!
# RUN $VENV/bin/pip3 install aioredis==1.3.0;
# RUN $VENV/bin/pip3 install starlette uvicorn '
RUN $VENV/bin/pip3 install 'ray[serve]';  #  'ray[default]'
RUN $VENV/bin/pip3 install --ignore-installed entrypoints;

## Other (large) packages added for scientific work:
RUN $VENV/bin/pip3 install plotly
# RUN $VENV/bin/pip3 install torch
# RUN $VENV/bin/pip3 install sbi
# RUN $VENV/bin/pip3 install sbibm

# Install TVB specific packages
# WORKDIR $HOME/packages
# pandas, jupyterlab
RUN $VENV/bin/pip3 install xarray pytest pytest-cov pytest-benchmark scikit-learn sqlalchemy numba dill; \
    $VENV/bin/pip3 install --ignore-installed entrypoints;

# Clone and install tvb-root
# WORKDIR $HOME/packages
RUN git clone --depth 1 --no-single-branch https://github.com/the-virtual-brain/tvb-root.git;
ARG LAST_SHA_TVB=LATEST
RUN cd tvb-root; \
    git pull --allow-unrelated-histories; \
    cd tvb_library; \
    $VENV/bin/python setup.py develop; \
    cd ../tvb_framework; \
    $VENV/bin/python setup.py develop; \
    cd ../tvb_storage; \
    $VENV/bin/python setup.py develop; \
    cd ../tvb_contrib; \
    $VENV/bin/python setup.py develop

# Clone and install tvb-multiscale
WORKDIR $HOME/packages
RUN git clone --depth 1 --no-single-branch https://github.com/the-virtual-brain/tvb-multiscale.git;
ARG LAST_SHA_MULTISCALE=LATEST
RUN cd tvb-multiscale; \
    git pull origin --allow-unrelated-histories; \
    $VENV/bin/python setup.py develop --no-deps;

# Install Jupyter notebook specific packages
WORKDIR $HOME/packages
RUN $VENV/bin/pip3 install ipympl;  # ipywidgets
RUN $VENV/bin/jupyter nbextension enable --py widgetsnbextension;  # --sys-prefix

# Checkout specific branch of tvb-multiscale
# WORKDIR $HOME/packages
RUN cd tvb-multiscale; \
    git checkout ray; \
    git pull --allow-unrelated-histories;

# Compile tvb-netpyne .mod files
WORKDIR $HOME/packages
RUN cd tvb-multiscale; \
    $VENV/bin/nrnivmodl tvb_multiscale/tvb_netpyne/netpyne/mod;

# RUN $VENV/bin/pip3 install numpy==1.23.4
# RUN $VENV/bin/pip3 install pandas==1.5.2

WORKDIR $HOME
# Activate the right python env.
ENV NEST_INSTALL_DIR=/opt/nest
RUN . ${NEST_INSTALL_DIR}/bin/nest_vars.sh
ENV NEST_PYTHON_PREFIX=${NEST_INSTALL_DIR}/lib/python3.10/site-packages
ENV PYTHONPATH=$PYTHONPATH:$VENV:${NEST_PYTHON_PREFIX}
## Note that the following are automatically reset if NEST is imported
## via a call to  tvb_nest.simulator_nest.nest_factory.load_nest()
ENV NEST_DATA_DIR=${NEST_INSTALL_DIR}/share/nest
ENV SLI_PATH=${NEST_INSTALL_DIR}/share/nest/sli
ENV NEST_MODULE_PATH=${NEST_MODULE_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NEST_MODULE_PATH}
ENV NEST_DOC_DIR=${NEST_INSTALL_DIR}/share/doc/nest

ENV NEST_DESKTOP_HOST=${NEST_DESKTOP_HOST:-0.0.0.0}
ENV NEST_DESKTOP_PORT=${NEST_DESKTOP_PORT:-8000}
ENV NEST_SERVER_HOST=${NEST_SERVER_HOST:-0.0.0.0}
ENV NEST_SERVER_MODULES=${NEST_SERVER_MODULES:-nest,numpy}
ENV NEST_SERVER_PORT=${NEST_SERVER_PORT:-5000}
ENV NEST_SERVER_RESTRICTION_OFF=${NEST_SERVER_RESTRICTION_OFF:-1}
ENV NEST_SERVER_STDOUT=${NEST_SERVER_STDOUT:-1}

ENV MUSIC_ROOT_DIR=/opt/music-install
ENV MUSIC_ROOT=${MUSIC_ROOT_DIR}
ENV MUSIC_PATH=${MUSIC_ROOT_DIR}
ENV LD_LIBRARY_PATH=${MUSIC_PATH}/lib:$LD_LIBRARY_PATH
ENV PATH=${MUSIC_PATH}/bin:$PATH
ENV CPATH=${MUSIC_PATH}/include:$CPATH
ENV PYTHONPATH=${MUSIC_PATH}/lib/python3.8/site-packages:$PYTHONPATH
ENV PATH=$PATH:/usr/local/bin

# ----------------------------------------------------------------------------------------------------------------------
# Run the following lines in case you want to install your own NEST module with NEST builders
# The commented lines will install modules in the MODULES_LIST upon building this image
## Install local tvb-multiscale:
#WORKDIR $HOME/packages
#RUN mkdir tvb-multiscale
#COPY ./tvb-multiscale/ tvb-multiscale/
#RUN cd tvb-multiscale; $VENV/bin/python setup.py develop --no-deps
ENV MYMODULES_DIR=$HOME/packages/tvb-multiscale/tvb_multiscale/tvb_nest/nest/modules
ENV MYMODULES_BLD_DIR=$HOME/packages/nest_modules_builds
RUN cp -r ${MYMODULES_DIR} ${MYMODULES_BLD_DIR}
#ARG MYMODULES_LIST="izhikevich_hamker iaf_cond_ww_deco"
#ARG MYMODULES_DIR=$HOME/packages/tvb-multiscale/tvb_multiscale/tvb_nest/nest/modules
#ARG NEST_CONFIG=${NEST_INSTALL_DIR}/bin/nest-config
#RUN for MYMODULE_NAME in $MYMODULES_LIST; do export MYMODULE_DIR=${MYMODULES_DIR}/${MYMODULE_NAME}; \
#        export MYMODULE_BLD=${MYMODULES_BLD_DIR}/${MYMODULE_NAME}module_bld; \
#        mkdir -p ${MYMODULE_BLD}; cd ${MYMODULE_BLD}; \
#            cmake -Dwith-nest=$NEST_CONFIG ${MYMODULE_DIR}; \
#            make; make install; \
#    done
# ----------------------------------------------------------------------------------------------------------------------

# Final configurations
# tvb42
RUN $VENV/bin/jupyter notebook --generate-config; \
    echo "c.NotebookApp.password='sha1:12bff019c253:9daecd92c2e9bdb10b3b8a06767a74a0fe078d7c'">>/home/docker/.jupyter/jupyter_notebook_config.py; \
    echo "c.MultiKernelManager.default_kernel_name='neurosci'">>/home/docker/.jupyter/jupyter_notebook_config.py
RUN $VENV/bin/ipython kernel install --user --name="neurosci"

WORKDIR /home/docker/

# Activate the right python env
ENV PYTHONPATH $VENV
ENV SLI_PATH $VENV
RUN echo ". $VENV/bin/activate" >> .profile

# For running examples
#CMD $VENV/bin/python /home/docker/packages/tvb-multiscale/docker/installation_test.py
# CMD $VENV/bin/python /home/docker/packages/tvb-multiscale/examples/tvb_nest/basal_ganglia_izhikevich.py.py
# CMD $VENV/bin/python /home/docker/packages/tvb-multiscale/examples/tvb_nest/example.py

# Test NEST installation
# RUN cd $NEST; make installcheck
# CMD $VENV/bin/python /home/docker/packages/tvb-multiscale/docker/module_build_test.py

# pynestml installation test:
# CMD cd /home/docker/packages/nestml; $VENV/bin/pytest setup.py test

# pyNN-NEST installation test:
# CMD $VENV/bin/python -c "import pyNN.nest as sim; sim.setup(); sim.end(); print(sim)";

#For running tests
#CMD $VENV/bin/pytest /home/docker/packages/tvb-multiscale/tests

#For running tests with coverage
#CMD $VENV/bin/pytest --cov=nest_tests_coverage /home/docker/packages/tvb-multiscale/tests

#Run jupyter notebooks
CMD $VENV/bin/jupyter notebook --ip 0.0.0.0 --no-browser --allow-root

# CMD /bin/bash